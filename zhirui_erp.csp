#
# Enterprise Resource Planning System
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2020-2021 Chengdu Covariant Technology Co., LTD.
#
# Email:   dev@covariant.cn
# Github:  https://github.com/chengdu-zhirui
# Website: https://covariant.cn

@charset: utf8

import imgui, imgui_font, code128, csdbc
import codec.base64.standard as base64
import codec.json as json
using  imgui

package zhirui_erp

# Config

var csdbc_adapter = null

namespace config
    var       mons = {"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"}
    var       days = {"星期天", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}
    var      title = "知锐ERP综合管理系统"
    var    version = "版本：v2.4"
    var   out_name = "借出"
    var    in_name = "归还"
    # enabled when >=0, monitor id
    var fullscreen = -1
    var  win_width = 1280
    var win_height = 720
    var  font_size = 20
    var query_freq = 10
    # classic, light, dark
    var      style = "light"
    var  mod1_name = "资产管理"
    var  mod2_name = "办理借还"
    var  mod3_name = "借还记录"
    var  mod4_name = "生成条码"
    var  mod5_name = "签到/签退"
    var  mod6_name = "值班记录"
    var  mod7_name = "信息管理"
    var  mod8_name = "值班人员"
    var  info_name = "信息"
    var  item_name = "物品"
    var  code_name = "编码"
    var  desc_name = "描述"
    var   bar_name = "条码"
    var    id_name = "工号"
    var    nm_name = "姓名"
    var   rec_name = "借还记录"
    var   man_hour = "工时"
    var   check_in = "签到"
    var  check_out = "签退"
    var  sect_name = "部门"
end

# Time

function align(str)
    if str.size == 1
        return "0" + str
    else
        return str
    end
end

function get_time_str(t)
    var hour = null
    if t.hour < 13
        hour = " 上午 " + align(to_string(t.hour))
    else
        hour = " 下午 " + align(to_string(t.hour - 12))
    end
    return to_string(t.year + 1900) + "年" + config.mons[t.mon] + to_string(t.mday) + "日 " + config.days[t.wday] + align(hour) + ":" + align(to_string(t.min)) + ":" + align(to_string(t.sec))
end

function to_timestamp(t)
@begin
    return base64.encode(json.to_string(json.from_var({
        "year": t.year,
        "day" : t.yday,
        "hour": t.hour,
        "min" : t.min
    }.to_hash_map())))
@end
end

function from_timestamp(t)
    return json.to_var(json.from_string(base64.decode(t)))
end

function timestamp2string(t)
    var ts = from_timestamp(t)
    var hour = null
    if ts.hour < 13
        hour = " 上午 " + align(to_string(ts.hour))
    else
        hour = " 下午 " + align(to_string(ts.hour - 12))
    end
    return align(hour) + " 时 " + align(to_string(ts.min)) + " 分" 

end

# Database

struct user_data
    var id = new string
    var name = new string
    var sect = new string
    var info = new string
end

struct query_cache
    var query_count = config.query_freq * 10
    var actual_data = null
end

struct database
    var db = csdbc_adapter
    var query_buff = new hash_map
    function create()
        # Code: 条形码, Item_Desc: 物品描述, Avail: 可用数量
        db.just_exec("CREATE TABLE ITEM_DATA(CODE " + db.typenames_full[csdbc.sql_text] + ", ITEM_DESC " + db.typenames_full[csdbc.sql_text] + ", AVAIL " + db.typenames_full[csdbc.sql_int] + ")")
        # Code: 条形码, Name: 借/还人姓名, ID: 学号, Count: 数量
        db.just_exec("CREATE TABLE RENT_DATA(CODE " + db.typenames_full[csdbc.sql_text] + ", NAME " + db.typenames_full[csdbc.sql_text] + ", ID " + db.typenames_full[csdbc.sql_text] + ", COUNT " + db.typenames_full[csdbc.sql_int] + ")")
        # Type: 类型(OUT/IN), Code: 条形码, Time: 借/还时间, ID： 学号
        db.just_exec("CREATE TABLE RENT_REC(TYPE " + db.typenames_full[csdbc.sql_text] + ", CODE " + db.typenames_full[csdbc.sql_text] + ", TIME " + db.typenames_full[csdbc.sql_text] + ", ID " + db.typenames_full[csdbc.sql_text] + ")")
        # ID: 学号, STATE: 状态(IN/OUT) TIME_STAMP: 时间戳, TIME_SUM: 打卡总时间
        db.just_exec("CREATE TABLE ATTD_DATA(ID " + db.typenames_full[csdbc.sql_text] + ", STATE " + db.typenames_full[csdbc.sql_text] + ", TIME_STAMP " + db.typenames_full[csdbc.sql_text] + ", TIME_SUM " + db.typenames_full[csdbc.sql_int] + ")")
        # Type: 类型(OUT/IN), ID： 学号, Time: 打卡时间
        db.just_exec("CREATE TABLE ATTD_REC(TYPE " + db.typenames_full[csdbc.sql_text] + ", ID " + db.typenames_full[csdbc.sql_text] + ", TIME " + db.typenames_full[csdbc.sql_text] + ")")
        # ID: 学号, NAME: 姓名, SECT: 学院/部门, INFO: 信息(联系方式等)
        db.just_exec("CREATE TABLE USER_DATA(ID " + db.typenames_full[csdbc.sql_text] + ", NAME " + db.typenames_full[csdbc.sql_text] + ", SECT " + db.typenames_full[csdbc.sql_text] + ", INFO " + db.typenames_full[csdbc.sql_text] + ")")
    end
    function validate()
        # Check Table
        var t = db.table_list()
        var item_found = false, rent_found = false, rec_found = false, attd_found = false, atrec_found = false, user_found = false
        foreach it in t
            switch it
                case "ITEM_DATA"
                    item_found = true
                end
                case "RENT_DATA"
                    rent_found = true
                end
                case "RENT_REC"
                    rec_found = true
                end
                case "ATTD_DATA"
                    attd_found = true
                end
                case "ATTD_REC"
                    atrec_found = true
                end
                case "USER_DATA"
                    user_found = true
                end
            end
        end
        if !item_found || !rent_found || !rec_found || !attd_found || !atrec_found || !user_found
            return false
        end
        function check(col, name, type)
            return col.name == name && col.type.toupper() == type
        end
        # Check ITEM_DATA
        var c = db.column_info("ITEM_DATA")
        if c.size != 3
            return false
        end
        if !check(c[0], "CODE", db.typenames[csdbc.sql_text]) || !check(c[1], "ITEM_DESC", db.typenames[csdbc.sql_text]) || !check(c[2], "AVAIL", db.typenames[csdbc.sql_int])
            return false
        end
        # Check RENT_DATA
        c = db.column_info("RENT_DATA")
        if c.size != 4
            return false
        end
        if !check(c[0], "CODE", db.typenames[csdbc.sql_text]) || !check(c[1], "NAME", db.typenames[csdbc.sql_text]) || !check(c[2], "ID", db.typenames[csdbc.sql_text]) || !check(c[3], "COUNT", db.typenames[csdbc.sql_int])
            return false
        end
        # Check RENT_REC
        c = db.column_info("RENT_REC")
        if c.size != 4
            return false
        end
        if !check(c[0], "TYPE", db.typenames[csdbc.sql_text]) || !check(c[1], "CODE", db.typenames[csdbc.sql_text]) || !check(c[2], "TIME", db.typenames[csdbc.sql_text]) || !check(c[3], "ID", db.typenames[csdbc.sql_text])
            return false
        end
        # Check ATTD_DATA
        c = db.column_info("ATTD_DATA")
        if c.size != 4
            return false
        end
        if !check(c[0], "ID", db.typenames[csdbc.sql_text]) || !check(c[1], "STATE", db.typenames[csdbc.sql_text]) || !check(c[2], "TIME_STAMP", db.typenames[csdbc.sql_text]) || !check(c[3], "TIME_SUM", db.typenames[csdbc.sql_int])
            return false
        end
        # Check ATTD_REC
        c = db.column_info("ATTD_REC")
        if c.size != 3
            return false
        end
        if !check(c[0], "TYPE", db.typenames[csdbc.sql_text]) || !check(c[1], "ID", db.typenames[csdbc.sql_text]) || !check(c[2], "TIME", db.typenames[csdbc.sql_text])
            return false
        end
        # Check USER_DATA
        c = db.column_info("USER_DATA")
        if c.size != 4
            return false
        end
        if !check(c[0], "ID", db.typenames[csdbc.sql_text]) || !check(c[1], "NAME", db.typenames[csdbc.sql_text]) || !check(c[2], "SECT", db.typenames[csdbc.sql_text]) || !check(c[3], "INFO", db.typenames[csdbc.sql_text])
            return false
        end
        return true
    end
    function gen_code()
        var t = runtime.local_time()
        var base = to_string(t.yday)
        while base.size < 3
            base = "0" + base
        end
        var min_now = t.hour*60 + t.min
        min_now = to_string(math.randint(min_now, 9999))
        while min_now.size < 4
            min_now = "0" + min_now
        end
        return to_string(t.year + 1900) + base + min_now
    end
    function gen_unique_code()
        var code = null
        loop
            code = gen_code()
            var result = db.exec("SELECT * FROM ITEM_DATA WHERE CODE=\"" + code + "\"")
        until result.size == 0
        return code
    end
    function add_item(code, desc, override)
        var result = db.exec("SELECT * FROM ITEM_DATA WHERE CODE=\"" + code + "\"")
        if result.size > 0
            if desc.size != 0
                if !override && desc != result[0][1].data
                    return 0
                end
                var stmt = db.prepare("UPDATE ITEM_DATA SET ITEM_DESC=? WHERE CODE=\"" + code + "\"")
                stmt.bind(0, desc)
                stmt.just_exec()
            end
            var stmt = db.prepare("UPDATE ITEM_DATA SET AVAIL=? WHERE CODE=\"" + code + "\"")
            stmt.bind(0, to_string(to_integer(result[0][2].data.to_number() + 1)))
            stmt.just_exec()
            return result[0][2].data.to_number() + 1
        else
            var stmt = db.prepare("INSERT INTO ITEM_DATA VALUES(?,?,?)")
            stmt.bind(0, code)
            stmt.bind(1, desc)
            stmt.bind(2, "1")
            stmt.just_exec()
            return 1
        end
    end
    function find_item(code)
        return db.exec("SELECT * FROM ITEM_DATA WHERE CODE=\"" + code + "\"")
    end
    # Return Values:
    #>=0: Remain items
    # -1: No available item
    # -2: Item not found
    # -3: Different name
    function rent(code, name, id, override)
        # Compose Time String
        var time = get_time_str(runtime.local_time())
        # Query Item Data
        var result = db.exec("SELECT * FROM ITEM_DATA WHERE CODE=\"" + code + "\"")
        if result.size == 0
            return -2
        end
        if result[0][2].data.to_number() == 0
            return -1
        end
        var remain = result[0][2].data.to_number() - 1
        # Query Rent Data
        result = db.exec("SELECT * FROM RENT_DATA WHERE CODE=\"" + code + "\" AND ID=\"" + id + "\"")
        if result.size != 0
            # Override Name
            if result[0][1].data != name
                if override
                    var stmt = db.prepare("UPDATE RENT_DATA SET NAME=? WHERE CODE=\"" + code + "\" AND ID=\"" + id + "\"")
                    stmt.bind(0, name)
                    stmt.just_exec()
                else
                    return -3
                end
            end
            # Update Rent Count
            var stmt = db.prepare("UPDATE RENT_DATA SET COUNT=? WHERE CODE=\"" + code + "\" AND ID=\"" + id + "\"")
            stmt.bind(0, to_string(to_integer(result[0][3].data.to_number() + 1)))
            stmt.just_exec()
        else
            # Insert New Data
            var stmt = db.prepare("INSERT INTO RENT_DATA VALUES(?,?,?,?)")
            stmt.bind(0, code)
            stmt.bind(1, name)
            stmt.bind(2, id)
            stmt.bind(3, "1")
            stmt.just_exec()
        end
        # Update Item Available
        var stmt = db.prepare("UPDATE ITEM_DATA SET AVAIL=? WHERE CODE=\"" + code + "\"")
        stmt.bind(0, to_string(to_integer(remain)))
        stmt.just_exec()
        # Insert Rent Record
        stmt = db.prepare("INSERT INTO RENT_REC VALUES(?,?,?,?)")
        stmt.bind(0, config.out_name)
        stmt.bind(1, code)
        stmt.bind(2, time)
        stmt.bind(3, id)
        stmt.just_exec()
        return remain
    end
    # Return Values:
    # >0: Remain items
    #  0: Item not found
    # -1: Rent Count equals 0
    # -2: Different name
    # -3: Rent Data not found
    function give_back(code, name, id, override)
        # Compose Time String
        var time = get_time_str(runtime.local_time())
        # Query Item Data
        var result = db.exec("SELECT * FROM ITEM_DATA WHERE CODE=\"" + code + "\"")
        if result.size == 0
            return 0
        end
        var remain = result[0][2].data.to_number() + 1
        # Query Rent Data
        result = db.exec("SELECT * FROM RENT_DATA WHERE CODE=\"" + code + "\" AND ID=\"" + id + "\"")
        if result.size != 0
            if result[0][3].data.to_number() == 0
                return -1
            end
            # Override Name
            if result[0][1].data != name
                if override
                    var stmt = db.prepare("UPDATE RENT_DATA SET NAME=? WHERE CODE=\"" + code + "\" AND ID=\"" + id + "\"")
                    stmt.bind(0, name)
                    stmt.just_exec()
                else
                    return -2
                end
            end
            # Update Rent Count
            var stmt = db.prepare("UPDATE RENT_DATA SET COUNT=? WHERE CODE=\"" + code + "\" AND ID=\"" + id + "\"")
            stmt.bind(0, to_string(to_integer(result[0][3].data.to_number() - 1)))
            stmt.just_exec()
        else
            return -3
        end
        # Update Item Available
        var stmt = db.prepare("UPDATE ITEM_DATA SET AVAIL=? WHERE CODE=\"" + code + "\"")
        stmt.bind(0, to_string(to_integer(remain)))
        stmt.just_exec()
        # Insert Rent Record
        stmt = db.prepare("INSERT INTO RENT_REC VALUES(?,?,?,?)")
        stmt.bind(0, config.in_name)
        stmt.bind(1, code)
        stmt.bind(2, time)
        stmt.bind(3, id)
        stmt.just_exec()
        return remain
    end
    function find_rent(code, id)
        return db.exec("SELECT * FROM RENT_DATA WHERE CODE=\"" + code + "\" AND ID=\"" + id +"\"")
    end
    function get_log()
        return db.exec("SELECT * FROM RENT_REC")
    end
    # Return Values:
    #>=0: Legal Check Time(Check-out Successfully)
    # -1: Check-in Successfully
    # -2: Lacking Checkout(will not accumulate summary time)
    function check_in_out(id)
        var time_now = runtime.local_time()
        var stmt = db.prepare("SELECT * FROM ATTD_DATA WHERE ID=?")
        stmt.bind(0, id)
        var result = stmt.exec()
        if result.size > 0
            var time_stamp = from_timestamp(result[0][2].data)
            var tsum = time_now.hour - time_stamp.hour
            var state = null
            if time_stamp.year == time_now.year && time_stamp.day == time_now.yday
                if result[0][1].data == "IN"
                    stmt = db.prepare("UPDATE ATTD_DATA SET STATE=?, TIME_STAMP=?, TIME_SUM=? WHERE ID=?")
                    stmt.bind(0, "OUT")
                    stmt.bind(1, to_timestamp(time_now))
                    stmt.bind(2, to_string(result[0][3].data.to_number() + tsum))
                    stmt.bind(3, id)
                    stmt.just_exec()
                    state = "OUT"
                else
                    stmt = db.prepare("UPDATE ATTD_DATA SET STATE=?, TIME_STAMP=? WHERE ID=?")
                    stmt.bind(0, "IN")
                    stmt.bind(1, to_timestamp(time_now))
                    stmt.bind(2, id)
                    stmt.just_exec()
                    state = "IN"
                    tsum = -1
                end
            else
                if result[0][1].data == "OUT"
                    tsum = -1
                else
                    tsum = -2
                end
                stmt = db.prepare("UPDATE ATTD_DATA SET STATE=?, TIME_STAMP=? WHERE ID=?")
                stmt.bind(0, "IN")
                stmt.bind(1, to_timestamp(time_now))
                stmt.bind(2, id)
                stmt.just_exec()
                state = "IN"
            end
            stmt = db.prepare("INSERT INTO ATTD_REC VALUES(?,?,?)")
            stmt.bind(0, state)
            stmt.bind(1, id)
            stmt.bind(2, get_time_str(time_now))
            stmt.just_exec()
            return tsum
        else
            stmt = db.prepare("INSERT INTO ATTD_DATA VALUES(?,?,?,?)")
            stmt.bind(0, id)
            stmt.bind(1, "IN")
            stmt.bind(2, to_timestamp(time_now))
            stmt.bind(3, "0")
            stmt.just_exec()
            stmt = db.prepare("INSERT INTO ATTD_REC VALUES(?,?,?)")
            stmt.bind(0, "IN")
            stmt.bind(1, id)
            stmt.bind(2, get_time_str(time_now))
            stmt.just_exec()
            return -1
        end
    end
    function get_man_hour(id)
        var result = db.exec("SELECT * FROM ATTD_DATA WHERE ID=\"" + id +"\"")
        if result.empty()
            return -1
        else
            return result[0][3].data.to_number()
        end
    end
    function get_check_log()
        return db.exec("SELECT * FROM ATTD_REC")
    end
    function set_user_data(dat, override)
        var result = db.exec("SELECT * FROM USER_DATA WHERE ID=\"" + dat.id +"\"")
        if result.empty() || override
            if result.empty()
                var stmt = db.prepare("INSERT INTO USER_DATA VALUES(?,?,?,?)")
                stmt.bind(0, dat.id)
                stmt.bind(1, dat.name)
                stmt.bind(2, dat.sect)
                stmt.bind(3, dat.info)
                stmt.just_exec()
            else
                var stmt = db.prepare("UPDATE USER_DATA SET NAME=?, SECT=?, INFO=? WHERE ID=?")
                stmt.bind(0, dat.name)
                stmt.bind(1, dat.sect)
                stmt.bind(2, dat.info)
                stmt.bind(3, dat.id)
                stmt.just_exec()
            end
            return true
        else
            return false
        end
    end

    function get_info_by_state()
        var r = db.exec("SELECT ID, TIME_STAMP FROM ATTD_DATA WHERE STATE = \"IN\"")
        if r.empty()
            return {}
        end
        var result = {}
        foreach line in r 
            var time_stamp = from_timestamp(line[1].data)
            var now_time =  runtime.local_time()
            if time_stamp.year == now_time.year && time_stamp.day == now_time.yday  
                result.push_back(line)
            end 
        end
        return result
    end

    function get_info_by_id(id)
        var result = db.exec("SELECT * FROM USER_DATA WHERE ID=\"" + id +"\"")
        if result.empty()
            return null
        else
            var dat = new user_data
            dat.id = id
            dat.name = result[0][1].data
            dat.sect = result[0][2].data
            dat.info = result[0][3].data
            return move(dat)
        end
    end

    function get_name_by_id(id)
        if !query_buff.exist(id)
            query_buff[id] = new query_cache
        end
        if ++query_buff[id].query_count > config.query_freq*10
            query_buff[id].query_count = 0
            var result = db.exec("SELECT NAME FROM USER_DATA WHERE ID=\"" + id +"\"")
            if !result.empty()
                query_buff[id].actual_data = result[0][0].data
                return result[0][0].data
            else
                if query_buff.exist(id)
                    query_buff.erase(id)
                end
                return null
            end
        else
            if query_buff.exist(id)
                return query_buff[id].actual_data
            else
                return null
            end
        end
    end
end

# GUI

struct gui
    var db = null
    var ui = null
    var font = null

    function ui_prep()
        ui.prepare()
        imgui.push_font(font)
    end

    function ui_render()
        imgui.pop_font()
        ui.render()
    end

    function barcode_callback(x1, y1, x2, y2, color)
        add_rect_filled(vec2(x1, y1), vec2(x2, y2), color ? vec4(1, 1, 1, 1) : vec4(0, 0, 0, 1), 0)
    end

    function main()
        system.file.remove("./imgui.ini")
        db = new database
        if !db.validate()
            db.create()
        end
        if config.fullscreen >= 0
            ui = fullscreen_application(config.fullscreen, config.title)
        else
            ui = window_application(config.win_width, config.win_height, config.title)
        end
        font = add_font_extend_cn(imgui_font.source_han_sans, config.font_size)
        switch config.style
            case "classic"
                style_color_classic()
            end
            case "light"
                style_color_light()
            end
            case "dark"
                style_color_dark()
            end
        end
        var window_open = true, tab1_open = true, tab2_open = true, tab3_open = true, log_open = true, tab4_open = true, rec_open = true, tab5_open = true, stay_open = true;
        var message = "无错误", code = new string, desc = new string
        var override_describe = false, override_name = false, override_info = false, verifying_name = true
        var name = new string, id = new string, sect = new string, info = new string
        var refresh = true, log_limit = 0, rec_refresh = true, rec_limit = 0, log_query_count = 0, rec_query_count = 0, stay_refresh = true, stay_limit = 0, stay_query_count = 0
        var show_bar = false, barcode = new string, total_size = 0
        var slice = 2, height = 90, padding = 6, scale = 1
        var rent_log = db.get_log(), check_log = db.get_check_log(), stay_log = db.get_info_by_state()
        loop
            if ui.is_closed()
                system.exit(0)
            end
            window_open = true
            ui_prep()
            if !tab3_open
                show_bar = false
            end
            begin_window("Win1", window_open, {flags.menu_bar, flags.no_title_bar, flags.no_resize, flags.no_move, flags.no_collapse})
            set_window_pos(vec2(0, 0))
            var window_width = 0, window_height = 0
            if log_open || rec_open
                window_width = ui.get_window_width() / 2 
            else
                window_width = ui.get_window_width()
            end

            if stay_open
                window_height = ui.get_window_height() * 2 / 3
            else
                window_height = ui.get_window_height()
            end
            set_window_size(vec2(window_width, window_height))
            if begin_menu_bar()
                if begin_menu("视图管理", true)
                    if menu_item("显示" + config.mod1_name, "", !tab1_open)
                        tab1_open = true
                    end
                    if menu_item("显示" + config.mod2_name, "", !tab2_open)
                        tab2_open = true
                    end
                    if menu_item("显示" + config.mod4_name, "", !tab3_open)
                        tab3_open = true
                    end
                    if menu_item("显示" + config.mod5_name, "", !tab4_open)
                        tab4_open = true
                    end
                    if menu_item("显示" + config.mod7_name, "", !tab5_open)
                        tab5_open = true
                    end
                    if menu_item("显示" + config.mod3_name, "", !log_open)
                        log_open = true
                    end
                    if menu_item("显示" + config.mod6_name, "", !rec_open)
                        rec_open = true
                    end
                    if menu_item("显示" + config.mod8_name, "", !stay_open)
                        stay_open = true
                    end
                    if config.fullscreen >=0 && menu_item("退出程序", "", true)
                        system.exit(0)
                    end
                    end_menu()
                end
                menu_item(config.version, "", false)
                end_menu_bar()
            end
            if tab1_open || tab2_open || tab3_open || tab4_open || tab5_open
                text(message)
                begin_tab_bar("TabBar")
                if begin_tab_item(config.mod2_name, tab2_open, {})
                    text(config.code_name)
                    same_line()
                    input_text("##T2TXT1", code, 128)
                    same_line()
                    if button("清空" + config.code_name)
                        code = new string
                    end
                    text(config.id_name)
                    same_line()
                    input_text("##T2TXT3", id, 128)
                    same_line()
                    if button("清空" + config.id_name)
                        id = new string
                    end
                    text(config.nm_name)
                    same_line()
                    input_text("##T2TXT4", name, 128)
                    same_line()
                    if button("查询" + config.nm_name + "##QUERY2")
                        if id.size != 0
                            var ret = db.get_name_by_id(id)
                            if ret != null
                                message = "欢迎，" + ret
                                name = ret
                            else
                                message = "错误：" + config.id_name + "不存在"
                            end
                        else
                            message = "错误：" + config.id_name + "为空"
                        end
                    end
                    separator()
                    if button("查询" + config.info_name + "##QUERY2")
                        if code.size != 0 && id.size != 0
                            var arr = db.find_rent(code, id)
                            if arr.size != 0
                                name = arr[0][1].data
                                message = "已" + config.out_name + "数量：" + arr[0][3].data
                            else
                                message = "错误：" + config.rec_name + "不存在"
                            end
                        else
                            message = "错误：" + config.code_name + "或" + config.id_name + "为空"
                        end
                    end
                    same_line()
                    if button("办理" + config.out_name)
                        if code.size != 0 && id.size != 0
                            var ret = db.rent(code, name, id, override_name)
                            switch ret
                                default
                                    message = "剩余" + config.item_name + "数量：" + ret
                                    code = new string
                                    desc = new string
                                    name = new string
                                    id = new string
                                    refresh = true
                                end
                                case -1
                                    message = "错误：无可用" + config.item_name
                                end
                                case -2
                                    message = "错误：" + config.info_name + "未找到"
                                end
                                case -3
                                    message = "错误：" + config.nm_name + "不匹配"
                                end
                            end
                        else
                            message = "错误：" + config.code_name + "或" + config.id_name + "为空"
                        end
                        override_name = false
                    end
                    same_line()
                    if button("办理" + config.in_name)
                        if code.size != 0 && id.size != 0
                            var ret = db.give_back(code, name, id, override_name)
                            switch ret
                                default
                                    message = "剩余" + config.item_name + "数量：" + ret
                                    code = new string
                                    desc = new string
                                    name = new string
                                    id = new string
                                    refresh = true
                                end
                                case 0
                                    message = "错误：" + config.info_name + "未找到"
                                end
                                case -1
                                    message = "错误：" + config.item_name + "已全部" + config.in_name
                                end
                                case -2
                                    message = "错误：" + config.nm_name + "不匹配"
                                end
                                case -3
                                    message = "错误：" + config.rec_name + "未找到"
                                end
                            end
                        else
                            message = "错误：" + config.code_name + "或" + config.id_name + "为空"
                        end
                        override_name = false
                    end
                    check_box("覆盖" + config.nm_name + "##CHECK2", override_name)
                    end_tab_item()
                end
                if begin_tab_item(config.mod5_name, tab4_open, {})
                    text(config.id_name)
                    same_line()
                    input_text("##T4TXT1", id, 128)
                    same_line()
                    if button("清空" + config.id_name)
                        id = new string
                    end
                    separator()
                    if button(config.mod5_name)
                        if id.size != 0
                            var name_ret = db.get_name_by_id(id)
                            if verifying_name && name_ret == null
                                message = "错误：" + config.id_name + "未找到"
                            else
                                var ret = db.check_in_out(id)
                                switch ret
                                    default
                                        message = config.check_out + "成功。累积" + config.man_hour + "：" + ret
                                    end
                                    case -1
                                        if name_ret != null
                                            message = config.check_in + "成功。欢迎，" + name_ret
                                        else 
                                            message = config.check_in + "成功"
                                        end
                                    end
                                    case -2
                                        message = config.check_in + "成功。上次未" + config.check_out + "，无有效" + config.man_hour + "累积"
                                    end
                                end
                                rec_refresh = true
                                id = new string
                            end
                        else
                            message = "错误：" + config.id_name + "为空"
                        end
                    end
                    same_line()
                    if button("查询" + config.man_hour)
                        if id.size != 0
                            var ret = db.get_man_hour(id)
                            if ret == -1
                                message = "查询不到" + config.mod6_name
                            else
                                message = "累积" + config.man_hour + "：" + ret
                            end
                        else
                            message = "错误：" + config.id_name + "为空"
                        end
                    end
                    check_box(config.mod5_name + "时验证" + config.id_name + "##CHECK4", verifying_name)
                    end_tab_item()
                end
                if begin_tab_item(config.mod7_name, tab5_open, {})
                    text(config.id_name)
                    same_line()
                    input_text("##T5TXT1", id, 128)
                    same_line()
                    if button("清空" + config.id_name)
                        id = new string
                    end
                    text(config.nm_name)
                    same_line()
                    input_text("##T5TXT2", name, 128)
                    same_line()
                    if button("清空" + config.nm_name)
                        name = new string
                    end
                    text(config.sect_name)
                    same_line()
                    input_text("##T5TXT3", sect, 128)
                    same_line()
                    if button("清空" + config.sect_name)
                        sect = new string
                    end
                    text(config.info_name)
                    same_line()
                    input_text_multiline("##T5TXT4", info, 1024)
                    same_line()
                    if button("清空" + config.info_name)
                        info = new string
                    end
                    separator()
                    if button("查询" + config.info_name)
                        if id.size != 0
                            var ret = db.get_info_by_id(id)
                            if ret != null
                                message = "欢迎，" + ret.name
                                name = ret.name
                                sect = ret.sect
                                info = ret.info
                            else
                                message = "错误：" + config.id_name + "未找到"
                            end
                        else
                            message = "错误：" + config.id_name + "为空"
                        end
                    end
                    same_line()
                    if button("提交" + config.info_name)
                        if id.size != 0 && name.size != 0 && sect.size != 0
                            var dat = new user_data
                            dat.id = id
                            dat.name = name
                            dat.sect = sect
                            dat.info = info
                            if db.set_user_data(dat, override_info)
                                message = "提交" + config.info_name + "成功"
                                id = new string
                                name = new string
                                sect = new string
                                info = new string
                            else
                                message = "错误：" + config.info_name + "已存在"
                            end
                        else
                            message = "错误：除" + config.info_name + "外均需要填写"
                        end
                    end
                    text("注意：" + config.id_name + "为必填项")
                    check_box("覆盖" + config.info_name + "##CHECK3", override_info)
                    end_tab_item()
                end
                if begin_tab_item(config.mod1_name, tab1_open, {})
                    text(config.code_name)
                    same_line()
                    input_text("##T1TXT1", code, 128)
                    same_line()
                    if button("清空" + config.code_name)
                        code = new string
                    end
                    text(config.desc_name)
                    same_line()
                    input_text_multiline("##T1TXT2", desc, 1024)
                    same_line()
                    if button("查询" + config.info_name + "##QUERY1")
                        if code.size != 0
                            var arr = db.find_item(code)
                            if arr.size != 0
                                desc = arr[0][1].data
                                message = config.item_name + "可用数量：" + arr[0][2].data
                            else
                                message = "错误：" + config.code_name + "不存在"
                            end
                        else
                            message = "错误：" + config.code_name + "为空"
                        end
                    end
                    separator()
                    if button("生成" + config.code_name)
                        code = db.gen_unique_code()
                    end
                    same_line()
                    if button("提交" + config.info_name)
                        if code.size != 0
                            if db.add_item(code, desc, override_describe) > 0
                                message = "提交成功"
                                code = new string
                                desc = new string
                            else
                                message = "错误：" + config.item_name + "冲突"
                            end
                        else
                            message = "错误：" + config.code_name + "为空"
                        end
                        override_describe = false
                    end
                    check_box("覆盖" + config.desc_name + "##CHECK1", override_describe)
                    end_tab_item()
                end
                if begin_tab_item(config.mod4_name, tab3_open, {})
                    text(config.code_name)
                    same_line()
                    input_text("##T3TXT1", code, 128)
                    same_line()
                    if button("清空" + config.code_name)
                        code = new string
                    end
                    text("宽度")
                    same_line()
                    slider_float("##Slice", slice, 1, 10)
                    text("高度")
                    same_line()
                    slider_float("##Height", height, 20, 90)
                    if height - 2*padding*slice < 10
                        padding = (height - 10)/slice/2
                    end
                    text("留白")
                    same_line()
                    slider_float("##Padding", padding, 0, (height - 10)/slice/2)
                    text("缩放")
                    same_line()
                    slider_float("##Scale", scale, 1, 6)
                    separator()
                    if button("生成" + config.code_name)
                        code = db.gen_unique_code()
                    end
                    same_line()
                    if button("生成" + config.bar_name) && code.size != 0
                        show_bar = true
                        barcode = code128.gen_smart(code)
                        total_size = 0
                        foreach ch in barcode do total_size += to_integer(ch) - to_integer('0')
                    end
                    same_line()
                    if button("隐藏" + config.bar_name)
                        show_bar = false
                    end
                    if show_bar
                        if log_open || rec_open
                            code128.draw_code(barcode_callback, barcode, slice*scale, height*scale, padding, 0.5*(ui.get_window_width()/2 - slice*scale*(total_size + padding*2)), 0.5*(ui.get_window_height() - scale*height), total_size)
                        else
                            code128.draw_code(barcode_callback, barcode, slice*scale, height*scale, padding, 0.5*(ui.get_window_width() - slice*scale*(total_size + padding*2)), 0.5*(ui.get_window_height() - scale*height), total_size)
                        end
                    end
                    end_tab_item()
                end
                end_tab_bar()
            else
                text("请在“视图管理”中选择一个功能")
            end
            end_window()
            if log_open
                begin_window(config.mod3_name, log_open, {flags.menu_bar, flags.no_resize, flags.no_move, flags.no_collapse})
                    if rec_open
                        set_window_pos(vec2(ui.get_window_width()/2, 0))
                        set_window_size(vec2(ui.get_window_width()/2, ui.get_window_height()/2))
                    else
                        set_window_pos(vec2(ui.get_window_width()/2, 0))
                        set_window_size(vec2(ui.get_window_width()/2, ui.get_window_height()))
                    end
                    if begin_menu_bar()
                        if menu_item("显示所有", "", log_limit != 0)
                            log_limit = 0
                            refresh = true
                        end
                        if menu_item("显示最近10条", "", log_limit != 10)
                            log_limit = 10
                            refresh = true
                        end
                        if menu_item("显示最近100条", "", log_limit != 100)
                            log_limit = 100
                            refresh = true
                        end
                        menu_item(get_time_str(runtime.local_time()), "", false)
                        end_menu_bar()
                    end
                    if ++log_query_count > config.query_freq || refresh
                        log_query_count = 0
                        rent_log = db.get_log()
                    end
                    if log_limit > 0
                        while rent_log.size > log_limit
                            rent_log.pop_front()
                        end
                    end
                    columns(4, "##RENT_REC", true)
                    var unit = ui.get_window_width()/20
                    set_column_width(0, unit)
                    set_column_width(1, 2*unit)
                    set_column_width(2, 4*unit)
                    set_column_width(3, 3*unit)
                    text("记录")
                    next_column()
                    text(config.code_name)
                    next_column()
                    text("时间")
                    next_column()
                    text(config.id_name)
                    next_column()
                    foreach line in rent_log
                        separator()
                        foreach i in range(line.size)
                            if i == 3
                                var ret = db.get_name_by_id(line[i].data)
                                text(line[i].data + (ret == null ? "(未知)" : "(" + ret + ")"))
                            else
                                text(line[i].data)
                            end
                            next_column()
                        end
                    end
                    if refresh
                        set_scroll_here()
                        refresh = false
                    end
                end_window()
            end
            if rec_open
                begin_window(config.mod6_name, rec_open, {flags.menu_bar, flags.no_resize, flags.no_move, flags.no_collapse})
                    if log_open
                        set_window_pos(vec2(ui.get_window_width()/2, ui.get_window_height()/2))
                        set_window_size(vec2(ui.get_window_width()/2, ui.get_window_height()/2))
                    else
                        set_window_pos(vec2(ui.get_window_width()/2, 0))
                        set_window_size(vec2(ui.get_window_width()/2, ui.get_window_height()))
                    end
                    if begin_menu_bar()
                        if menu_item("显示所有", "", rec_limit != 0)
                            rec_limit = 0
                            rec_refresh = true
                        end
                        if menu_item("显示最近10条", "", rec_limit != 10)
                            rec_limit = 10
                            rec_refresh = true
                        end
                        if menu_item("显示最近100条", "", rec_limit != 100)
                            rec_limit = 100
                            rec_refresh = true
                        end
                        menu_item(get_time_str(runtime.local_time()), "", false)
                        end_menu_bar()
                    end
                    if ++rec_query_count > config.query_freq || rec_refresh
                        rec_query_count = 0
                        check_log = db.get_check_log()
                    end
                    if rec_limit > 0
                        while check_log.size > rec_limit
                            check_log.pop_front()
                        end
                    end
                    columns(3, "##ATTD_REC", true)
                    var unit = ui.get_window_width()/20
                    set_column_width(0, unit)
                    set_column_width(1, 3*unit)
                    set_column_width(2, 6*unit)
                    text("记录")
                    next_column()
                    text(config.id_name)
                    next_column()
                    text("时间")
                    next_column()
                    foreach line in check_log
                        separator()
                        foreach i in range(line.size)
                            switch i
                                case 0
                                    text(line[i].data == "IN" ? config.check_in : config.check_out)
                                end
                                case 1
                                    var ret = db.get_name_by_id(line[i].data)
                                    text(line[i].data + (ret == null ? "(未知)" : "(" + ret + ")"))
                                end
                                default
                                    text(line[i].data)
                                end
                            end
                            next_column()
                        end
                    end
                    if rec_refresh
                        set_scroll_here()
                        rec_refresh = false
                    end
                end_window()
            end
            if stay_open
                begin_window(config.mod8_name, stay_open, {flags.menu_bar, flags.no_resize, flags.no_move, flags.no_collapse})
                    var w_pos = 0, h_pos = 0, width = 0, height = 0
                    if log_open || rec_open
                        width = ui.get_window_width()/2   
                    else
                        width = ui.get_window_width()
                    end

                    if tab1_open || tab2_open || tab3_open || tab4_open || tab5_open
                        h_pos = ui.get_window_height() * 2 / 3
                        height = ui.get_window_height() / 3
                    else
                        h_pos = 0
                        height = ui.get_window_height()
                    end
                    set_window_pos(vec2(w_pos, h_pos))
                    set_window_size(vec2(width, height))
                    if begin_menu_bar()
                        if menu_item("显示所有", "", stay_limit != 0)
                            stay_limit = 0
                            stay_refresh = true
                        end
                        if menu_item("显示最近5条", "", stay_limit != 5)
                            stay_limit = 5
                            stay_refresh = true
                        end
                        if menu_item("显示最近10条", "", stay_limit != 10)
                            stay_limit = 10
                            stay_refresh = true
                        end
                        menu_item(get_time_str(runtime.local_time()), "", false)
                        end_menu_bar()
                    end
                    if ++stay_query_count > config.query_freq || stay_refresh
                        stay_query_count = 0
                        stay_log = db.get_info_by_state()
                    end
                    if stay_limit > 0
                        while stay_log.size > stay_limit
                            stay_log.pop_front()
                        end
                    end
                    columns(2, "##ATTD_DATA", true)
                    var unit = ui.get_window_width()/20
                    set_column_width(0, 3*unit)
                    set_column_width(1, 6*unit)
                    text(config.nm_name)
                    next_column()
                    text("签到时间")
                    next_column()
                    foreach line in stay_log
                        separator()
                        foreach i in range(line.size)
                            switch i
                                case 0
                                    var ret = db.get_name_by_id(line[i].data)
                                    text((ret == null ? "未知" : ret))
                                end
                                case 1
                                    text(timestamp2string(line[i].data))
                                    #text(line[i].data)
                                end
                            end
                            next_column()
                        end
                    end
                    if stay_refresh
                        set_scroll_here()
                        stay_refresh = false
                    end
                end_window()
            end
            ui_render()
        end
        
    end
end

function start()
    (new gui).main()
end
